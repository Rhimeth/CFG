cmake_minimum_required(VERSION 3.15)  # Increased for better features
project(CFGParser VERSION 1.0.0 LANGUAGES CXX C)

if(NOT CMAKE_C_COMPILER)
    message(WARNING "C compiler not found - some LLVM features might be limited")
    set(LLVM_ENABLE_LIBEDIT OFF)
else()
    # Explicitly look for LibEdit with C language support
    find_package(LibEdit)
    if(NOT LibEdit_FOUND)
        message(STATUS "LibEdit not found - terminal editing features will be limited")
        set(LLVM_ENABLE_LIBEDIT OFF)
    endif()
endif()

# Disallow in-source builds
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
    message(FATAL_ERROR "In-source builds not allowed. Please create a separate build directory.")
endif()

# Set C++ standard and build type
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Better build type handling
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Qt auto-generation settings
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOUIC_SEARCH_PATHS "${CMAKE_SOURCE_DIR}/src/gui")

# Find Qt5 packages
find_package(Qt5 5.15 COMPONENTS 
    Core 
    Gui 
    Widgets 
    PrintSupport
    WebEngine           # Added WebEngine module
    WebEngineWidgets
    WebEngineCore
    WebChannel
    Concurrent 
    Svg 
    OpenGL
    REQUIRED)

# LLVM/Clang configuration
find_package(LLVM 18.1 REQUIRED CONFIG)
find_package(Clang 18.1 REQUIRED CONFIG)

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVM_CONFIG: ${LLVM_CONFIG}")

llvm_map_components_to_libnames(LLVM_LIBS
    support
    core
    option
    demangle
    irreader
    bitreader
)

find_program(DOT_EXECUTABLE dot)
if(NOT DOT_EXECUTABLE)
    message(WARNING "Graphviz 'dot' not found - visualization features will be limited")
else()
    # Verify dot version
    execute_process(COMMAND ${DOT_EXECUTABLE} -V
        OUTPUT_VARIABLE DOT_VERSION
        ERROR_VARIABLE DOT_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    message(STATUS "Found Graphviz: ${DOT_VERSION}")
endif()

set(SOURCES
    src/gui/mainwindow.cpp
    src/gui/customgraphview.cpp
    src/gui/graph_viewer.cpp
    src/cfg_analyzer.cpp
    src/graph_generator.cpp
    src/parser.cpp
    src/visualizer.cpp
    src/ast_extractor.cpp
    src/main.cpp
    src/node.cpp
)

set(HEADERS
    include/graph_viewer.h
    include/analysis_results.h
    include/ast_extractor.h
    include/customgraphview.h
    include/cfg_analyzer.h
    include/graph_generator.h
    include/wsl_fallback.h
    include/parser.h
    include/visualizer.h
    include/mainwindow.h
    include/node.h
)

file(GLOB UI_FILES 
    "src/gui/*.ui"
)

# Create executable
add_executable(CFGParser 
    ${SOURCES} 
    ${HEADERS}
    ${UI_FILES}
)

# Modern target-based includes
target_include_directories(CFGParser PRIVATE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
    $<TARGET_PROPERTY:Qt5::Core,INTERFACE_INCLUDE_DIRECTORIES>
    ${LLVM_INCLUDE_DIRS}
    ${CLANG_INCLUDE_DIRS}
)

# Compiler options with better platform handling
if(MSVC)
    target_compile_options(CFGParser PRIVATE /W4 /WX /wd4200 /wd4251 /wd4275)
else()
    target_compile_options(CFGParser PRIVATE
        -Wall
        -Wextra
        -Wpedantic
        -Wno-unused-parameter
        -Wno-deprecated-declarations
        -Wno-nonnull  # Suppress Clang internal warnings
        $<$<CXX_COMPILER_ID:GNU>:-Wno-maybe-uninitialized>
    )
endif()

# Link libraries with modern CMake
target_link_libraries(CFGParser PRIVATE
    Qt5::Core
    Qt5::Gui
    Qt5::Widgets
    Qt5::PrintSupport
    Qt5::Svg
    Qt5::Concurrent
    Qt5::OpenGL
    Qt5::WebEngine
    Qt5::WebEngineWidgets
    Qt5::WebEngineCore
    Qt5::WebChannel
    ${LLVM_LIBS}
    clang-cpp
)

# Handle cases where clang-cpp isn't available
if(NOT TARGET clang-cpp)
    target_link_libraries(CFGParser PRIVATE
        clangAST
        clangBasic
        clangFrontend
        clangSerialization
        clangDriver
        clangParse
        clangSema
        clangAnalysis
        clangEdit
        clangTooling
        clangToolingCore
    )
endif()

# Output directory handling
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

# Configure DOT file processing if Graphviz is available
if(DOT_EXECUTABLE)
    # Create output directory for visualizations
    file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/visualizations")

    add_custom_target(process_dot_files ALL
        COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/visualizations"
        COMMENT "Creating visualizations directory"
    )

    file(GLOB_RECURSE DOT_FILES "${CMAKE_SOURCE_DIR}/src/output/*.dot")
    foreach(dot_file ${DOT_FILES})
        get_filename_component(dot_name ${dot_file} NAME_WE)
        string(MAKE_C_IDENTIFIER "${dot_name}" target_name)
        set(output_png "${CMAKE_BINARY_DIR}/visualizations/${dot_name}.png")
        
        add_custom_command(
            OUTPUT ${output_png}
            COMMAND ${DOT_EXECUTABLE} -Tpng "${dot_file}" -o "${output_png}"
            DEPENDS ${dot_file}
            COMMENT "Generating visualization: ${dot_name}.png"
            VERBATIM
        )
        
        add_custom_target(process_${target_name} DEPENDS ${output_png})
        add_dependencies(process_dot_files process_${target_name})
    endforeach()
endif()

# Modern install configuration
include(GNUInstallDirs)
install(TARGETS CFGParser 
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    BUNDLE DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Add uninstall target
configure_file(
    "${CMAKE_SOURCE_DIR}/cmake_uninstall.cmake.in"
    "${CMAKE_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P "${CMAKE_BINARY_DIR}/cmake_uninstall.cmake"
)

find_program(CLANG_TIDY_EXE NAMES "clang-tidy" "clang-tidy-18" "clang-tidy-17")
if(CLANG_TIDY_EXE)
    set(CMAKE_CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
    message(STATUS "Found clang-tidy: ${CLANG_TIDY_EXE}")
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)